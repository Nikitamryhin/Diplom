import tkinter as tk
from tkinter import ttk, simpledialog, messagebox
from tkinter import filedialog
from db import database  # Используем from db import database
import sqlite3  # для get_device


class MainWindow(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Учет и контроль состояния компьютерной техники")
        self.geometry("1152x850")

        # --- Переменные ---
        self.departments = database.get_departments()
        self.selected_department_id = None
        self.selected_device_id = None

        self.create_ui()
        self.load_departments()

    def create_ui(self):
        # --- Фрейм для списка отделов (слева) ---
        self.department_frame = ttk.Frame(self, borderwidth=2, relief="groove")
        self.department_frame.grid(row=0, column=0, sticky="nsew", padx=5, pady=5)

        department_label = ttk.Label(self.department_frame, text="Название отдела")
        department_label.pack(pady=5)

        self.department_listbox = tk.Listbox(self.department_frame)
        self.department_listbox.pack(fill="both", expand=True, padx=5, pady=5)
        self.department_listbox.bind("<<ListboxSelect>>", self.on_department_select)

        # Кнопки управления отделами
        self.department_buttons_frame = ttk.Frame(self.department_frame)
        self.department_buttons_frame.pack(pady=5)

        self.add_department_button = ttk.Button(self.department_buttons_frame, text="Добавить", command=self.add_department)
        self.add_department_button.pack(side=tk.LEFT, padx=2)

        self.delete_department_button = ttk.Button(self.department_buttons_frame, text="Удалить", command=self.delete_selected_department)
        self.delete_department_button.pack(side=tk.LEFT, padx=2)
        self.delete_department_button["state"] = tk.DISABLED

        # --- Фрейм для списка компьютеров (под списком отделов) ---
        self.computer_frame = ttk.Frame(self, borderwidth=2, relief="groove")
        self.computer_frame.grid(row=1, column=0, sticky="nsew", padx=5, pady=5)

        computer_label = ttk.Label(self.computer_frame, text="Компьютерная техника в отделе")
        computer_label.pack(pady=5)

        self.computer_tree = ttk.Treeview(self.computer_frame,
                                         columns=("id", "type", "model", "serial", "inventory", "cpu", "memory", "hdd", "gpu", "status"), show="headings")
        self.computer_tree.pack(fill="both", expand=True, padx=5, pady=5)
        # Настройка заголовков столбцов
        self.computer_tree.heading("id", text="ID")
        self.computer_tree.heading("type", text="Тип")
        self.computer_tree.heading("model", text="Модель")
        self.computer_tree.heading("serial", text="Серийный номер")
        self.computer_tree.heading("inventory", text="Инв. номер")
        self.computer_tree.heading("cpu", text="CPU")
        self.computer_tree.heading("memory", text="Memory")
        self.computer_tree.heading("hdd", text="HDD")
        self.computer_tree.heading("gpu", text="GPU")
        self.computer_tree.heading("status", text="Статус")

        # Настройка ширины столбцов
        self.computer_tree.column("id", width=30)
        self.computer_tree.column("type", width=80)
        self.computer_tree.column("model", width=100)
        self.computer_tree.column("serial", width=100)
        self.computer_tree.column("inventory", width=80)
        self.computer_tree.column("cpu", width=100)
        self.computer_tree.column("memory", width=70)
        self.computer_tree.column("hdd", width=70)
        self.computer_tree.column("gpu", width=100)
        self.computer_tree.column("status", width=100)

        self.computer_tree.bind("<<TreeviewSelect>>", self.on_device_select)

        # Кнопки управления устройствами
        self.device_buttons_frame = ttk.Frame(self.computer_frame)
        self.device_buttons_frame.pack(pady=5)

        self.add_device_button = ttk.Button(self.device_buttons_frame, text="Добавить", command=self.add_device)
        self.add_device_button.pack(side=tk.LEFT, padx=2)

        self.delete_device_button = ttk.Button(self.device_buttons_frame, text="Удалить", command=self.delete_device)
        self.delete_device_button.pack(side=tk.LEFT, padx=2)
        self.delete_device_button["state"] = tk.DISABLED

        # --- Фрейм для информации о компьютере (справа) ---
        self.info_frame = ttk.Frame(self, borderwidth=2, relief="groove")
        self.info_frame.grid(row=0, column=1, rowspan=2, sticky="nsew", padx=5, pady=5)

        info_label = ttk.Label(self.info_frame, text="Информация о компьютере")
        info_label.pack(pady=5)

        # Поля для информации об устройстве
        self.type_label = ttk.Label(self.info_frame, text="Тип:")
        self.type_label.pack(pady=2)
        self.type_entry = ttk.Entry(self.info_frame)
        self.type_entry.pack(pady=2)

        self.model_label = ttk.Label(self.info_frame, text="Модель:")
        self.model_label.pack(pady=2)
        self.model_entry = ttk.Entry(self.info_frame)
        self.model_entry.pack(pady=2)

        self.serial_label = ttk.Label(self.info_frame, text="Серийный номер:")
        self.serial_label.pack(pady=2)
        self.serial_entry = ttk.Entry(self.info_frame)
        self.serial_entry.pack(pady=2)

        self.inventory_label = ttk.Label(self.info_frame, text="Инвентарный номер:")
        self.inventory_label.pack(pady=2)
        self.inventory_entry = ttk.Entry(self.info_frame)
        self.inventory_entry.pack(pady=2)

        self.cpu_label = ttk.Label(self.info_frame, text="CPU:")
        self.cpu_label.pack(pady=2)
        self.cpu_entry = ttk.Entry(self.info_frame)
        self.cpu_entry.pack(pady=2)

        self.memory_label = ttk.Label(self.info_frame, text="Memory:")
        self.memory_label.pack(pady=2)
        self.memory_entry = ttk.Entry(self.info_frame)
        self.memory_entry.pack(pady=2)

        self.hdd_label = ttk.Label(self.info_frame, text="HDD:")
        self.hdd_label.pack(pady=2)
        self.hdd_entry = ttk.Entry(self.info_frame)
        self.hdd_entry.pack(pady=2)

        self.gpu_label = ttk.Label(self.info_frame, text="GPU:")
        self.gpu_label.pack(pady=2)
        self.gpu_entry = ttk.Entry(self.info_frame)
        self.gpu_entry.pack(pady=2)

        self.status_label = ttk.Label(self.info_frame, text="Статус:")
        self.status_label.pack(pady=2)
        self.status_entry = ttk.Entry(self.info_frame)
        self.status_entry.pack(pady=2)

        self.save_button = ttk.Button(self.info_frame, text="Сохранить изменения", command=self.save_device)
        self.save_button.pack(pady=10)
        self.save_button["state"] = tk.DISABLED

        # --- Menu ---
        self.menu_bar = tk.Menu(self)
        self.file_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.file_menu.add_command(label="Сформировать отчет об устройствах", command=self.open_devices_report_window)
        self.file_menu.add_command(label="Сформировать отчет о периферии", command=self.open_peripherals_report_window)
        self.file_menu.add_command(label="Управление периферией", command=self.open_peripherals_window)
        self.menu_bar.add_cascade(label="Файл", menu=self.file_menu)
        self.config(menu=self.menu_bar)
        # ---  Периферия ---
        self.peripherals_label = ttk.Label(self.info_frame, text="Периферия:")
        self.peripherals_label.pack(pady=2)

        self.device_peripherals_tree = ttk.Treeview(self.info_frame, columns=("name", "type"),
                                                      show="headings")
        self.device_peripherals_tree.heading("name", text="Название")
        self.device_peripherals_tree.heading("type", text="Тип")
        self.device_peripherals_tree.pack(fill="x", padx=5, pady=5)

        self.add_peripheral_button = ttk.Button(self.info_frame, text="Добавить периферию",
                                                   command=self.add_device_peripheral)
        self.add_peripheral_button.pack(pady=2, side=tk.LEFT)

        self.delete_peripheral_button = ttk.Button(self.info_frame, text="Удалить периферию",
                                                      command=self.delete_device_peripheral)
        self.delete_peripheral_button.pack(pady=2, side=tk.LEFT)
        self.delete_peripheral_button["state"] = tk.DISABLED  # Отключаем кнопку по умолчанию

        # --- Настройка размеров строк и столбцов ---
        self.grid_columnconfigure(0, weight=1)  # Список отделов и компьютеров расширяются
        self.grid_columnconfigure(1, weight=2)  # Информация о компьютере занимает больше места
        self.grid_rowconfigure(0, weight=1)  # Список отделов и информация расширяются по вертикали
        self.grid_rowconfigure(1, weight=1)  # Список компьютеров расширяются по вертикали

    def open_devices_report_window(self):
        """Открывает окно для создания отчета об устройствах"""
        DevicesReportWindow(self)

    def open_peripherals_report_window(self):
        """Открывает окно для создания отчета о периферии"""
        PeripheralsReportWindow(self)

    def open_peripherals_window(self):
        self.peripherals_window = PeripheralsWindow(self)  # Создаём окно периферии

    def open_othet_window(self):
        self.othet_window = PeripheralsReportWindow(self)  # Создаём окно отчетов

    def open_ystr_window(self):
        self.ystr_window = DevicesReportWindow(self)  # Создаём окно устройств

    def load_departments(self):
        """Загружает список отделов в Listbox"""
        self.department_listbox.delete(0, tk.END)
        self.departments = database.get_departments()
        for department in self.departments:
            self.department_listbox.insert(tk.END, department[1])

    def load_devices(self):
        """Загружает список устройств в Treeview"""
        for item in self.computer_tree.get_children():
            self.computer_tree.delete(item)

        if self.selected_department_id:
            devices = database.get_devices(self.selected_department_id)
            for device in devices:
                self.computer_tree.insert("", tk.END, values=(
                device[0], device[2], device[3], device[4], device[5],
                device[6], device[7], device[8], device[9], device[10]))

    def load_device_info(self):
        if self.selected_device_id:
            device = database.get_device(self.selected_device_id)  # Предполагаем, что у вас есть такая функция
            if device:
                self.type_entry.delete(0, tk.END)
                self.type_entry.insert(0, device[2])
                self.model_entry.delete(0, tk.END)
                self.model_entry.insert(0, device[3])
                self.serial_entry.delete(0, tk.END)
                self.serial_entry.insert(0, device[4])
                self.inventory_entry.delete(0, tk.END)
                self.inventory_entry.insert(0, device[5])
                self.cpu_entry.delete(0, tk.END)
                self.cpu_entry.insert(0, device[6])
                self.memory_entry.delete(0, tk.END)
                self.memory_entry.insert(0, device[7])
                self.hdd_entry.delete(0, tk.END)
                self.hdd_entry.insert(0, device[8])
                self.gpu_entry.delete(0, tk.END)
                self.gpu_entry.insert(0, device[9])
                self.status_entry.delete(0, tk.END)
                self.status_entry.insert(0, device[10])

                self.save_button["state"] = tk.NORMAL  # Включаем кнопку "Сохранить"
                self.load_device_peripherals()  # Загружаем периферию для устройства
            else:
                self.clear_device_info()

    def load_device_peripherals(self):
        """Загружает список периферии для устройства"""
        for item in self.device_peripherals_tree.get_children():
            self.device_peripherals_tree.delete(item)

        if self.selected_device_id:
            device_peripherals = database.get_device_peripherals(self.selected_device_id)
            print(f"Device peripherals to display: {device_peripherals}")
            for dp in device_peripherals:
                self.device_peripherals_tree.insert("", tk.END, values=(dp[1], dp[2]))

    def clear_device_info(self):
        """Очищает поля информации об устройстве"""
        self.type_entry.delete(0, tk.END)
        self.model_entry.delete(0, tk.END)
        self.serial_entry.delete(0, tk.END)
        self.inventory_entry.delete(0, tk.END)
        self.cpu_entry.delete(0, tk.END)
        self.memory_entry.delete(0, tk.END)
        self.hdd_entry.delete(0, tk.END)
        self.gpu_entry.delete(0, tk.END)
        self.status_entry.delete(0, tk.END)
        self.save_button["state"] = tk.DISABLED
        self.clear_device_peripherals()

    def clear_device_peripherals(self):
         for item in self.device_peripherals_tree.get_children():
            self.device_peripherals_tree.delete(item)

    def add_department(self):
        """Добавляет новый отдел."""
        name = simpledialog.askstring("Добавить отдел", "Введите название отдела:", parent=self)
        if name:
            department_id = database.insert_department(name)
            self.load_departments()
            self.department_listbox.selection_set(tk.END)
            self.on_department_select(None)  # Вызываем событие выбора, чтобы сразу загрузить устройства

    def delete_selected_department(self):
        """Удаляет выбранный отдел."""
        if self.selected_department_id is not None:
            if messagebox.askyesno("Удаление отдела", "Вы уверены, что хотите удалить этот отдел?", parent=self):
                database.delete_department(self.selected_department_id)
                self.load_departments()
                self.load_devices()
                self.clear_device_info()
                self.selected_department_id = None
                self.selected_device_id = None
                self.delete_department_button["state"] = tk.DISABLED  # Отключаем кнопку
                self.delete_device_button["state"] = tk.DISABLED
        else:
            messagebox.showinfo("Внимание", "Выберите отдел для удаления.", parent=self)

    def add_device(self):
        """Добавляет новое устройство в выбранный отдел."""
        if self.selected_department_id:
            device_type = simpledialog.askstring("Добавить устройство",
                                                  "Введите тип устройства (ПК, ноутбук и т.д.):", parent=self)
            model = simpledialog.askstring("Добавить устройство", "Введите модель устройства:", parent=self)
            serial_number = simpledialog.askstring("Добавить устройство",
                                                     "Введите серийный номер устройства:",
                                                     parent=self)
            inventory_number = simpledialog.askstring("Добавить устройство",
                                                       "Введите инвентарный номер устройства:",
                                                       parent=self)
            cpu = simpledialog.askstring("Добавить устройство", "Введите процессор:", parent=self)
            memory = simpledialog.askstring("Добавить устройство", "Введите объем памяти:", parent=self)
            hard_drive = simpledialog.askstring("Добавить устройство", "Введите объем жесткого диска:", parent=self)
            video_card = simpledialog.askstring("Добавить устройство", "Введите видеокарту:", parent=self)
            status = simpledialog.askstring("Добавить устройство", "Введите статус устройства:", parent=self)
            if device_type and model and serial_number and inventory_number and cpu and memory and hard_drive and video_card and status:
                device_id = database.insert_device(self.selected_department_id, device_type, model,
                                                      serial_number,
                                                      inventory_number, cpu, memory, hard_drive, video_card, status)
                self.load_devices()
                # Select the newly added device
                for item in self.computer_tree.get_children():
                    if self.computer_tree.item(item)['values'][0] == device_id:
                        self.computer_tree.selection_set(item)
                        self.computer_tree.focus(item)
                        self.on_device_select(None)
                        break
        else:
            messagebox.showinfo("Внимание", "Выберите отдел для добавления устройства.", parent=self)

    def delete_device(self):
        """Удаляет выбранное устройство."""
        if self.selected_device_id:
            if messagebox.askyesno("Удаление устройства", "Вы уверены, что хотите удалить это устройство?",
                                      parent=self):
                database.delete_device(self.selected_device_id)
                self.load_devices()
                self.clear_device_info()
                self.selected_device_id = None
                self.delete_device_button["state"] = tk.DISABLED
        else:
            messagebox.showinfo("Внимание", "Выберите устройство для удаления.", parent=self)

    def save_device(self):
        """Сохраняет изменения информации об устройстве."""
        if self.selected_device_id:
            device_type = self.type_entry.get()
            model = self.model_entry.get()
            serial_number = self.serial_entry.get()
            inventory_number = self.inventory_entry.get()
            cpu = self.cpu_entry.get()
            memory = self.memory_entry.get()
            hard_drive = self.hdd_entry.get()
            gpu = self.gpu_entry.get()
            status = self.status_entry.get()

            database.update_device(self.selected_device_id, self.selected_department_id, device_type, model,
                                      serial_number, inventory_number, cpu, memory, hard_drive, gpu, status)
            self.load_devices()  # Обновляем список устройств
        else:
            messagebox.showinfo("Внимание", "Выберите устройство для сохранения.", parent=self)

    def on_department_select(self, event):
        """Обрабатывает выбор отдела в Listbox"""
        try:
            selected_index = self.department_listbox.curselection()[0]
            self.selected_department_id = self.departments[selected_index][0]
            self.load_devices()
            self.clear_device_info()
            self.delete_department_button["state"] = tk.NORMAL
            self.delete_device_button["state"] = tk.DISABLED
        except IndexError:
            self.clear_device_info()
            self.selected_department_id = None
            self.delete_department_button["state"] = tk.DISABLED
            self.delete_device_button["state"] = tk.DISABLED

    def on_device_select(self, event):
        """Обрабатывает выбор устройства в Treeview"""
        try:
            selected_item = self.computer_tree.selection()[0]
            self.selected_device_id = self.computer_tree.item(selected_item)['values'][0]
            self.load_device_info()
            self.delete_device_button["state"] = tk.NORMAL
            self.load_device_peripherals()
            self.delete_peripheral_button["state"] = tk.NORMAL  # Включаем кнопку удаления
        except IndexError:
            self.clear_device_info()
            self.clear_device_peripherals()
            self.selected_device_id = None
            self.delete_device_button["state"] = tk.DISABLED
            self.delete_peripheral_button["state"] = tk.DISABLED  # Выключаем кнопку удаления

    def add_device_peripheral(self):  # Это тоже нужно переименовать в add_device_peripheral
        if self.selected_device_id:
            AddDevicePeripheralDialog(self, self.selected_device_id)
        else:
            messagebox.showinfo("Внимание", "Выберите устройство, чтобы добавить периферию.", parent=self)

    def delete_device_peripheral(self):
        """Удаляет выбранную периферию из устройства."""
        try:
            selected_item = self.device_peripherals_tree.selection()[0]
            peripheral_name = self.device_peripherals_tree.item(selected_item)['values'][0]  # Получаем ID периферии
            peripheral = database.get_peripheral_by_name(peripheral_name)
            if messagebox.askyesno("Удаление периферии",
                                      "Вы уверены, что хотите удалить эту периферию из устройства?", parent=self):
                database.delete_device_peripheral(self.selected_device_id, peripheral[1])
                self.load_device_peripherals()
        except IndexError:
            messagebox.showinfo("Внимание", "Выберите периферию для удаления.", parent=self)

class DevicesReportWindow(tk.Toplevel):
    def __init__(self, parent):
        super().__init__(parent)
        self.parent = parent
        self.title("Отчет об устройствах")
        self.geometry("800x600")

        self.report_text = tk.Text(self, wrap="word")
        self.report_text.pack(fill="both", expand=True, padx=10, pady=10)

        self.generate_report()

        # Кнопка "Сохранить в файл"
        self.save_button = ttk.Button(self, text="Сохранить в файл", command=self.save_report)
        self.save_button.pack(pady=10)

    def generate_report(self):
            """Генерирует отчет об устройствах."""
            self.report_text.delete("1.0", tk.END)  # Очищаем предыдущий отчет

            departments = database.get_departments() #  Получаем список всех отделов

            if not departments:
                self.report_text.insert(tk.END, "Нет данных об устройствах для создания отчета.")
                return

            report_text = "Отчет об устройствах:\n\n"

            for department in departments: #  Перебираем все отделы
                department_id = department[0]
                devices = database.get_devices_by_department(department_id) # Получаем устройства для каждого отдела

                if devices:
                    report_text += f"Отдел: {department[1]} (ID: {department_id})\n" # Указываем отдел
                    for device in devices:
                        report_text += f"  ID: {device[0]}\n"
                        report_text += f"  Тип: {device[2]}\n"
                        report_text += f"  Интерфейс: {device[3]}\n"
                        report_text += f"  Производитель: {device[4]}\n"
                        report_text += f"  Разрешение: {device[5]}\n"
                        report_text += f"  Описание: {device[6]}\n\n"
                else:
                    report_text += f"  В отделе {department[1]} нет устройств.\n\n"

            self.report_text.insert(tk.END, report_text)
            self.report_text.config(state="disabled")  # Делаем поле только для чтения

    def save_report(self):
        """Сохраняет отчет в файл."""
        filepath = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text files", "*.txt")])
        if filepath:
            try:
                with open(filepath, "w", encoding="utf-8") as f:
                    report_content = self.report_text.get("1.0", tk.END)
                    f.write(report_content)
                messagebox.showinfo("Отчет", f"Отчет сохранен в файл: {filepath}")
            except Exception as e:
                messagebox.showerror("Ошибка", f"Не удалось сохранить отчет: {e}")

class PeripheralsReportWindow(tk.Toplevel):
    def __init__(self, parent):
        super().__init__(parent)
        self.parent = parent
        self.title("Отчет о периферии")
        self.geometry("800x600")

        self.report_text = tk.Text(self, wrap="word")
        self.report_text.pack(fill="both", expand=True, padx=10, pady=10)

        self.generate_report()

        # Кнопка "Сохранить в файл"
        self.save_button = ttk.Button(self, text="Сохранить в файл", command=self.save_report)
        self.save_button.pack(pady=10)

    def generate_report(self):
        """Генерирует отчет о периферии."""
        self.report_text.delete("1.0", tk.END)  # Очищаем предыдущий отчет

        peripherals = database.get_peripherals()  # Получаем список всей периферии

        if not peripherals:
            self.report_text.insert(tk.END, "Нет данных о периферии для создания отчета.")
            return

        report_text = "Отчет о периферийном оборудовании:\n\n"
        for peripheral in peripherals:
            report_text += f"ID: {peripheral[0]}\n"
            report_text += f"Название: {peripheral[1]}\n"
            report_text += f"Тип: {peripheral[2]}\n"
            report_text += f"Интерфейс: {peripheral[3]}\n"
            report_text += f"Производитель: {peripheral[4]}\n"
            report_text += f"Разрешение: {peripheral[5]}\n"
            report_text += f"Тип печати: {peripheral[6]}\n"
            report_text += f"Скорость печати: {peripheral[7]}\n"
            report_text += f"Количество: {peripheral[8]}\n"
            report_text += f"Цена: {peripheral[9]}\n"
            report_text += f"Описание: {peripheral[10]}\n\n"

        self.report_text.insert(tk.END, report_text)
        self.report_text.config(state="disabled")  # Делаем поле только для чтения

    def save_report(self):
        """Сохраняет отчет в файл."""
        filepath = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text files", "*.txt")])
        if filepath:
            try:
                with open(filepath, "w", encoding="utf-8") as f:
                    report_content = self.report_text.get("1.0", tk.END)
                    f.write(report_content)
                messagebox.showinfo("Отчет", f"Отчет сохранен в файл: {filepath}")
            except Exception as e:
                messagebox.showerror("Ошибка", f"Не удалось сохранить отчет: {e}")

# --- Диалоговые окна для добавления и редактирования периферии ---
class PeripheralsWindow(tk.Toplevel):
    def __init__(self, parent):
        super().__init__(parent)
        self.title("Управление периферией")
        self.geometry("1000x400")

        self.create_ui()
        self.load_peripherals()

    def create_ui(self):
        self.peripherals_tree = ttk.Treeview(self, columns=(
        "name", "type", "interface", "manufacturer", "resolution", "print_type", "print_speed", "quantity",
        "price", "description"),show="headings")
        self.peripherals_tree.heading("name", text="Название")
        self.peripherals_tree.heading("type", text="Тип")
        self.peripherals_tree.heading("interface", text="Интерфейс")
        self.peripherals_tree.heading("manufacturer", text="Производитель")
        self.peripherals_tree.heading("resolution", text="Разрешение")
        self.peripherals_tree.heading("print_type", text="Тип печати")
        self.peripherals_tree.heading("print_speed", text="Скорость печати")
        self.peripherals_tree.heading("quantity", text="Количество")
        self.peripherals_tree.heading("price", text="Цена")
        self.peripherals_tree.heading("description", text="Описание")

        # Устанавливаем ширину столбцов
        self.peripherals_tree.column("name", width=100)
        self.peripherals_tree.column("type", width=80)
        self.peripherals_tree.column("interface", width=80)
        self.peripherals_tree.column("manufacturer", width=100)
        self.peripherals_tree.column("resolution", width=80)
        self.peripherals_tree.column("print_type", width=80)
        self.peripherals_tree.column("print_speed", width=80)
        self.peripherals_tree.column("quantity", width=50)
        self.peripherals_tree.column("price", width=50)
        self.peripherals_tree.column("description", width=150, stretch=True)

        self.peripherals_tree.pack(fill="both", expand=True, padx=5, pady=5)

        # Кнопки управления
        self.buttons_frame = ttk.Frame(self)
        self.buttons_frame.pack(pady=5)

        self.add_button = ttk.Button(self.buttons_frame, text="Добавить", command=self.add_peripheral)
        self.add_button.pack(side=tk.LEFT, padx=2)

        self.edit_button = ttk.Button(self.buttons_frame, text="Редактировать", command=self.edit_peripheral)
        self.edit_button.pack(side=tk.LEFT, padx=2)

        self.delete_button = ttk.Button(self.buttons_frame, text="Удалить", command=self.delete_peripheral)
        self.delete_button.pack(side=tk.LEFT, padx=2)

    def load_peripherals(self):
        """Загружает список периферии в Treeview"""
        for item in self.peripherals_tree.get_children():
            self.peripherals_tree.delete(item)

        peripherals = database.get_peripherals()
        for peripheral in peripherals:
            self.peripherals_tree.insert("", tk.END, values=(
                peripheral[0],  # ID
                peripheral[1],  # name
                peripheral[2],  # type
                peripheral[3],  # interface
                peripheral[4],  # manufacturer
                peripheral[5],  # resolution
                peripheral[6],  # print_type
                peripheral[7],  # print_speed
                peripheral[8],  # quantity
                peripheral[9],  # price
                peripheral[10]  # description
            ))

    def add_peripheral(self):
        """Добавляет новую периферию."""
        AddPeripheralDialog(self)

    def edit_peripheral(self):
        """Редактирует выбранную периферию."""
        try:
            selected_item = self.peripherals_tree.selection()[0]
            peripheral_id = self.peripherals_tree.item(selected_item)['values'][0]
            EditPeripheralDialog(self, peripheral_id)
        except IndexError:
            messagebox.showinfo("Внимание", "Выберите периферию для редактирования.", parent=self)

    def delete_peripheral(self):
        """Удаляет выбранную периферию."""
        try:
            selected_item = self.peripherals_tree.selection()[0]
            peripheral_id = self.peripherals_tree.item(selected_item, 'values')[0]  # Получаем ID из первого столбца

            try:
                peripheral_id = int(peripheral_id)  # Пытаемся преобразовать в целое число
            except ValueError:
                messagebox.showerror("Ошибка", "Некорректный ID периферии.")
                return

            print(f"Удаляем периферию с ID: {peripheral_id}")  # Добавленная строка отладки
            if messagebox.askyesno("Удаление периферии",
                                      "Вы уверены, что хотите удалить эту периферию?", parent=self):
                database.delete_peripheral(peripheral_id)
                print("Удаление выполнено.")  # Добавленная строка отладки
                self.load_peripherals()
            else:
                print("Удаление отменено.")  # Добавленная строка отладки
        except IndexError:
            print("Не выбрана периферия для удаления.")  # Добавленная строка отладки
            messagebox.showinfo("Внимание", "Выберите периферию для удаления.", parent=self)

# --- Диалоговые окна для добавления и редактирования периферии ---
class AddPeripheralDialog(simpledialog.Dialog):
    def __init__(self, parent):
        self.parent = parent
        super().__init__(parent, title="Добавить периферию")

    def body(self, master):
        ttk.Label(master, text="Название:").grid(row=0, sticky=tk.W)
        self.name_entry = ttk.Entry(master)
        self.name_entry.grid(row=0, column=1, sticky=tk.E)

        ttk.Label(master, text="Тип:").grid(row=1, sticky=tk.W)
        self.type_entry = ttk.Entry(master)
        self.type_entry.grid(row=1, column=1, sticky=tk.E)

        ttk.Label(master, text="Интерфейс:").grid(row=2, sticky=tk.W)
        self.interface_entry = ttk.Entry(master)
        self.interface_entry.grid(row=2, column=1, sticky=tk.E)

        ttk.Label(master, text="Производитель:").grid(row=3, sticky=tk.W)
        self.manufacturer_entry = ttk.Entry(master)
        self.manufacturer_entry.grid(row=3, column=1, sticky=tk.E)

        ttk.Label(master, text="Разрешение:").grid(row=4, sticky=tk.W)
        self.resolution_entry = ttk.Entry(master)
        self.resolution_entry.grid(row=4, column=1, sticky=tk.E)

        ttk.Label(master, text="Тип печати:").grid(row=5, sticky=tk.W)
        self.print_type_entry = ttk.Entry(master)
        self.print_type_entry.grid(row=5, column=1, sticky=tk.E)

        ttk.Label(master, text="Скорость печати:").grid(row=6, sticky=tk.W)
        self.print_speed_entry = ttk.Entry(master)
        self.print_speed_entry.grid(row=6, column=1, sticky=tk.E)

        ttk.Label(master, text="Количество:").grid(row=7, sticky=tk.W)
        self.quantity_entry = ttk.Entry(master)
        self.quantity_entry.grid(row=7, column=1, sticky=tk.E)

        ttk.Label(master, text="Цена:").grid(row=8, sticky=tk.W)
        self.price_entry = ttk.Entry(master)
        self.price_entry.grid(row=8, column=1, sticky=tk.E)

        ttk.Label(master, text="Описание:").grid(row=9, sticky=tk.W)
        self.description_entry = ttk.Entry(master)
        self.description_entry.grid(row=9, column=1, sticky=tk.E)

        return self.name_entry

    def apply(self):
        name = self.name_entry.get()
        type = self.type_entry.get()
        interface = self.interface_entry.get()
        manufacturer = self.manufacturer_entry.get()
        resolution = self.resolution_entry.get()
        print_type = self.print_type_entry.get()
        print_speed_str = self.print_speed_entry.get()  # Получаем значение как строку
        quantity = self.quantity_entry.get()
        price = self.price_entry.get()
        description = self.description_entry.get()

        try:
            quantity = int(quantity)
            price = float(price)
            print_speed = int(print_speed_str) if print_speed_str else 0  # Проверяем на пустую строку
        except ValueError:
            messagebox.showerror("Ошибка", "Некорректные значения для количества или цены или скорости печати.")
            return

        database.insert_peripheral(name, type, interface, manufacturer, resolution, print_type, print_speed,
                                      quantity, price, description)
        self.parent.load_peripherals()


class EditPeripheralDialog(simpledialog.Dialog):
    def __init__(self, parent, peripheral_id):
        self.parent = parent
        self.peripheral_id = peripheral_id
        super().__init__(parent, title="Редактировать периферию")

    def body(self, master):
        peripheral = database.get_peripheral(self.peripheral_id)  # Загружаем данные периферии

        ttk.Label(master, text="Название:").grid(row=0, sticky=tk.W)
        self.name_entry = ttk.Entry(master)
        self.name_entry.insert(0, peripheral[1])  # Заполняем данными из базы
        self.name_entry.grid(row=0, column=1, sticky=tk.E)

        ttk.Label(master, text="Тип:").grid(row=1, sticky=tk.W)
        self.type_entry = ttk.Entry(master)
        self.type_entry.insert(0, peripheral[2])
        self.type_entry.grid(row=1, column=1, sticky=tk.E)

        ttk.Label(master, text="Интерфейс:").grid(row=2, sticky=tk.W)
        self.interface_entry = ttk.Entry(master)
        self.interface_entry.insert(0, peripheral[3])
        self.interface_entry.grid(row=2, column=1, sticky=tk.E)

        ttk.Label(master, text="Производитель:").grid(row=3, sticky=tk.W)
        self.manufacturer_entry = ttk.Entry(master)
        self.manufacturer_entry.insert(0, peripheral[4])
        self.manufacturer_entry.grid(row=3, column=1, sticky=tk.E)

        ttk.Label(master, text="Разрешение:").grid(row=4, sticky=tk.W)
        self.resolution_entry = ttk.Entry(master)
        self.resolution_entry.insert(0, peripheral[5])
        self.resolution_entry.grid(row=4, column=1, sticky=tk.E)

        ttk.Label(master, text="Тип печати:").grid(row=5, sticky=tk.W)
        self.print_type_entry = ttk.Entry(master)
        self.print_type_entry.insert(0, peripheral[6])
        self.print_type_entry.grid(row=5, column=1, sticky=tk.E)

        ttk.Label(master, text="Скорость печати:").grid(row=6, sticky=tk.W)
        self.print_speed_entry = ttk.Entry(master)
        self.print_speed_entry.insert(0, peripheral[7])
        self.print_speed_entry.grid(row=6, column=1, sticky=tk.E)

        ttk.Label(master, text="Количество:").grid(row=7, sticky=tk.W)
        self.quantity_entry = ttk.Entry(master)
        self.quantity_entry.insert(0, peripheral[8])
        self.quantity_entry.grid(row=7, column=1, sticky=tk.E)

        ttk.Label(master, text="Цена:").grid(row=8, sticky=tk.W)
        self.price_entry = ttk.Entry(master)
        self.price_entry.insert(0, peripheral[9])
        self.price_entry.grid(row=8, column=1, sticky=tk.E)

        ttk.Label(master, text="Описание:").grid(row=9, sticky=tk.W)
        self.description_entry = ttk.Entry(master)
        self.description_entry.insert(0, peripheral[10])
        self.description_entry.grid(row=9, column=1, sticky=tk.E)

        return self.name_entry  # Фокус на поле "Название"

    def apply(self):
        name = self.name_entry.get()
        type = self.type_entry.get()
        interface = self.interface_entry.get()
        manufacturer = self.manufacturer_entry.get()
        resolution = self.resolution_entry.get()
        print_type = self.print_type_entry.get()
        print_speed = self.print_speed_entry.get()
        quantity = self.quantity_entry.get()
        price = self.price_entry.get()
        description = self.description_entry.get()

        try:
            conn = database.create_connection()
            cursor = conn.cursor()
            cursor.execute("""
                UPDATE Peripherals
                SET name=?, type=?, interface=?, manufacturer=?, resolution=?,
                    print_type=?, print_speed=?, quantity=?, price=?, description=?
                WHERE id=?
            """, (name, type, interface, manufacturer, resolution, print_type, print_speed,
                    quantity, price, description, self.peripheral_id))
            conn.commit()
            conn.close()
            self.parent.load_peripherals()  # Обновляем список периферии
            messagebox.showinfo("Информация", "Периферия успешно отредактирована.")
            self.destroy()  # Закрываем диалог
        except sqlite3.Error as e:
            messagebox.showerror("Ошибка", f"Ошибка при редактировании периферии: {e}")


class AddDevicePeripheralDialog(simpledialog.Dialog):
    def __init__(self, parent, device_id):
        self.parent = parent
        self.device_id = device_id
        super().__init__(parent, title="Добавить периферию к устройству")

    def body(self, master):
        ttk.Label(master, text="Периферия:").grid(row=0, sticky=tk.W)
        self.peripheral_combobox = ttk.Combobox(master, state="normal")
        self.peripheral_combobox.grid(row=0, column=1, sticky=tk.E)

        ttk.Label(master, text="Модель:").grid(row=1, sticky=tk.W)
        self.quantity_entry = ttk.Entry(master)
        self.quantity_entry.insert(0, "1")
        self.quantity_entry.grid(row=1, column=1, sticky=tk.E)

        return self.peripheral_combobox

    def apply(self):
        peripheral_name = self.peripheral_combobox.get()
        quantity = self.quantity_entry.get()

        try:
            quantity = (quantity)
        except ValueError:
            messagebox.showerror("Ошибка", "Некорректное значение для модели.")
            return

        # Ищем периферию по названию
        peripheral = database.get_peripheral_by_name(peripheral_name)

        if peripheral:
            # Если найдена, используем ее ID
            peripheral_id = peripheral[0]
        else:
            # Если не найдена, создаем новую (только имя)
            peripheral_id = database.insert_peripheral_name_only(peripheral_name)

        database.insert_device_peripheral(self.device_id, peripheral_id, quantity)
        self.parent.load_device_peripherals()

# Предполагаем, что у вас есть функция get_device в database.py:
def get_device(id):
    connection = sqlite3.connect('demo.db')  # Замените 'demo.db' на имя вашей базы данных
    cursor = connection.cursor()
    cursor.execute("SELECT * FROM Devices WHERE id=?", (id,))
    device = cursor.fetchone()
    connection.close()
    return device


# Добавляем функцию get_device в класс database
database.get_device = get_device

if __name__ == "__main__":
    database.create_tables() # Убедитесь, что таблицы созданы
    app = MainWindow()
    app.mainloop()
